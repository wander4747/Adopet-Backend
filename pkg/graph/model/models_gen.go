// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type NewUser struct {
	Name        string   `json:"name"`
	Email       string   `json:"email"`
	CityID      int      `json:"cityID"`
	StateID     int      `json:"stateID"`
	Phone       *string  `json:"phone"`
	Description *string  `json:"description"`
	Password    string   `json:"password"`
	Photo       *string  `json:"photo"`
	Type        TypeUser `json:"type"`
	ShowEmail   bool     `json:"showEmail"`
	ShowPhone   bool     `json:"showPhone"`
	ShowAddress bool     `json:"showAddress"`
	Address     string   `json:"address"`
	Number      *int     `json:"number"`
	ZipCode     string   `json:"zipCode"`
	Complement  *string  `json:"complement"`
	TotalPets   *int     `json:"totalPets"`
}

type TypeUser string

const (
	TypeUserNormal    TypeUser = "NORMAL"
	TypeUserModerator TypeUser = "MODERATOR"
)

var AllTypeUser = []TypeUser{
	TypeUserNormal,
	TypeUserModerator,
}

func (e TypeUser) IsValid() bool {
	switch e {
	case TypeUserNormal, TypeUserModerator:
		return true
	}
	return false
}

func (e TypeUser) String() string {
	return string(e)
}

func (e *TypeUser) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TypeUser(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TypeUser", str)
	}
	return nil
}

func (e TypeUser) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
